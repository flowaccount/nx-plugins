// import { PreFirehoseStack, FireHoseStack, DbFirehoseStack } from './app';
import { environment } from './environments/environment';
import { logger } from '@nx/devkit';
import { App } from 'aws-cdk-lib/core';
import { AuroraServerlessDbStack, ElasticsearchStack, ManagedPolicyStack, RoleStack, ServerlessApplicationStack, SQSStack, TypescriptLambdaStack, VpcStack } from '@flowaccount/aws-cdk-stack';

logger.info("üê∫")
const app = new App();
let resourceArns: string[] = []
const _vpcStack = new VpcStack(app, `${environment.stackName}-vpc`, { ...environment.vpc, awsCredentials: environment.awsCredentials });
<% if(sqs) { %>
const sqsStack = new SQSStack(app,`${environment.stackName}-sqs`, { ...environment})
resourceArns = resourceArns.concat(sqsStack.output.queues.map(q => q.queueArn));
<% } %>

<% if(rds) { %>
const rdsStack = new AuroraServerlessDbStack(app, `${environment.stackName}-sls-db`, 
{ vpc: _vpcStack.vpc, 
  subnets: _vpcStack.subnetSelection,
  ...environment.aurora
});
resourceArns.push(rdsStack.output.auroraArn)
<% } %>
// Initiate Serverless
logger.debug(`start appending resources into policy`)
          environment.serverless.executionRole.policies.forEach(policy => {
            logger.debug(`start appending resources into statements`)
            policy.statements?.forEach(statement => {
              if(statement.forceResource){
                resourceArns.forEach(arn => {
                  logger.debug(`append ${arn} into policy`)
                  statement.resources.push(arn)
                })
              }
            })
          })
          const lambdaRoleStack = new RoleStack(app, `${environment.stackName}-serverless-role`, {
            name: environment.serverless.executionRole.name,
            assumedBy: environment.serverless.executionRole.assumedBy
          })
          environment.serverless.executionRole.policies.forEach(policyProps => {
            logger.info(`creating stack ${policyProps.name}`)
            const policy = (new ManagedPolicyStack(app, `${policyProps.name}`, { ...policyProps, roles: [ lambdaRoleStack.output.role ] })).output.policy
          });
          const lambdaStack = new TypescriptLambdaStack(app, `${environment.stackName}-serverless-typescript-lambda`, { 
            vpc: _vpcStack.vpc,
            subnets: _vpcStack.subnetSelection,
            functions: environment.serverless.lambda,
            role: lambdaRoleStack.output.role
          });

